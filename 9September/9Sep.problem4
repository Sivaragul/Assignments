Mutex class
-----------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ThreadingDemo
{
    public class Class2
    {

        static void Main(string[] args)
        {
            
            using (Mutex mutex = new Mutex(false, "ThreadingDemo"))
            {

                if (!mutex.WaitOne(4000, false))
                {
                    Console.WriteLine("Already running..");
                    Console.ReadLine();
                    return;

                }
                else
                {
                    Console.WriteLine("App is running");
                    Console.ReadLine();
                }

            }

        }
    }
}


================================================================================================================================================================

Monitor class
-------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ThreadingDemo
{
    public class MonitorDemo
    {
        static object a1 = new object();
        static void PrintTable()
        {

            Thread.Sleep(800);
            WriteToFile();

        }

        static void WriteToFile()
        {
            string threadname = Thread.CurrentThread.Name;
            Console.WriteLine(threadname);
            Monitor.Enter(a1);

            try
            {

                using (FileStream fs = new FileStream("Table.txt", FileMode.Append, FileAccess.Write))
                {
                    StreamWriter wr = new StreamWriter(fs);
                    wr.WriteLine(threadname);
                    wr.Close();
                    fs.Close();
                }




            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }
            finally
            {


                Monitor.Exit(a1);
                Console.WriteLine("Releasing the thread " + threadname);

            }




        }
        static void Main(string[] args)
        {

            for (int i = 0; i < 4; i++)
            {
                Thread thread = new Thread(PrintTable);
                thread.Name = string.Concat("thread ", i);
                thread.Start();

            }
            Console.Read();

        }
    }
}






